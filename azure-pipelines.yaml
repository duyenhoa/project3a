trigger:
- main

pool: myAgentPool

variables:
  azureServiceConnectionId: 'udacity3'
  webAppName: 'web-AppService'
  environmentName: 'web-AppService'
  projectRoot: $(System.DefaultWorkingDirectory)
  python.version: '3.7.6'

name: Azure Pipelines
stages:
  - stage: ProvisionIaC
    displayName: Resources provisioning
    jobs:
    - job: Provision_Azure_IaC
      displayName: Provision Azure IaC
      pool:
        name: myAgentPool
      steps:
      - task: DownloadSecureFile@1
        name: tfvardef
        displayName: Download terraform.tfvars
        inputs:
          secureFile: 'terraform.tfvars'
      
      - task: Bash@3
        displayName: Copy terraform.tfvars
        inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
      
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: '0.14.8'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AZServiceConnection'
          backendAzureRmResourceGroupName: 'Devops'
          backendAzureRmStorageAccountName: 'hoaudacity3'
          backendAzureRmContainerName: 'tf-state'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: |
            -auto-approve
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'

  - stage: Build
    jobs:
      - job: Build
        pool:
          name: myAgentPool
        steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
      - task: ArchiveFiles@2
        displayName: 'Archive FakeRestAPI'
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: $(Build.BuildId)-fakerestapi.zip

      - publish: $(Build.BuildId)-fakerestapi.zip
        displayName: 'Upload Package'
        artifact: drop-fakerestapi
  - stage:
    jobs:
    - deployment: FakeRestAPI
      pool:
        name: myAgentPool
      environment: 'TEST'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: 'udacity3'
                appType: 'webApp'
                appName: 'web-AppService'
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


